import json
import pooch
import urllib

from importlib import metadata


# Export the version defined in project metadata
__version__ = metadata.version(__package__)
del metadata


def create(server=None, doi=None, **pooch_args):
    """Create a pooch from a DataVerse repository

    :param server:
        The DataVerse server URL
    :param doi:
        The DOI of the dataset to make available through pooch.
    :param pooch_args:
        Arguments that will be passed to pooch.create
    """

    # Assert that the user has not provided arguments generated by this function
    if "registry" in pooch_args:
        raise ValueError("The 'registry' argument will be provided by dataverse2pooch")
    if "urls" in pooch_args:
        raise ValueError("The 'url' argument will be provided by dataverse2pooch")

    # Parse the server URL
    server = urllib.parse.urlparse(server)

    # Fetch the repository metadata (using pooch to cache)
    metadata_file = pooch.retrieve(
        server._replace(
            path="/api/datasets/:persistentId", query=f"persistentId=doi:{doi}"
        ).geturl(),
        known_hash=None,
    )

    # Parse the metadata JSON
    with open(metadata_file) as f:
        metadata = json.load(f)

    # Collect hash registry and URLs
    registry = {}
    urls = {}

    # Traverse the individual files
    for filedata in metadata["data"]["latestVersion"]["files"]:
        filename = filedata["dataFile"]["filename"]
        filehash = f"md5:{filedata['dataFile']['md5']}"
        fileurl = server._replace(
            path="/api/access/datafile/:persistentId",
            query=f"persistentId={filedata['dataFile']['persistentId']}",
        ).geturl()

        registry[filename] = filehash
        urls[filename] = fileurl

    # Set suitable defaults for pooch.create
    pooch_args.setdefault("path", pooch.os_cache("dataverse2pooch"))
    pooch_args.setdefault("base_url", server.geturl())

    return pooch.create(registry=registry, urls=urls, **pooch_args)
